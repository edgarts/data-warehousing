sources:
  - name: main
    tables:
      - name: bike_data
        description: "NYC Citi Bike System Trip Histories"
        columns:
          - name: tripduration
            data_type: varchar
            description: "Trip Duration in seconds (old format)"
          - name: starttime
            data_type: varchar
            description: "Trip Start Time and Date (old format)"
            data_tests:
              - dbt_expectations.expect_column_to_exist
          - name: stoptime
            data_type: varchar
            description: "Trip End Time and Date (old format)"
            data_tests:
              - dbt_expectations.expect_column_to_exist
          - name: start station id
            data_type: varchar
            description: "Trip Start Station Id (old format)"
            data_tests:
              - dbt_expectations.expect_column_to_exist
          - name: start station name
            data_type: varchar
            description: "Trip Start Station Name (old format)"
          - name: start station latitude
            data_type: varchar
            description: "Trip Start Station Latitude (old format)"
          - name: start station longitude
            data_type: varchar
            description: "Trip Start Station Longitude (old format)"
          - name: end station id
            data_type: varchar
            description: "Trip End Station Id (old format)"
            data_tests:
              - dbt_expectations.expect_column_to_exist
          - name: end station name
            data_type: varchar
            description: "Trip End Station Name (old format)"
          - name: end station latitude
            data_type: varchar
            description: "Trip End Station Latitude (old format)"
          - name: end station longitude
            data_type: varchar
            description: "Trip End Station Longitude (old format)"
          - name: bikeid
            data_type: varchar
            description: "Bike Identification Number (old format)"
          - name: usertype
            data_type: varchar
            description: "User Type (Customer = 24-hour pass or 3-day pass user; Subscriber = Annual Member) (old format)"
          - name: birth year
            data_type: varchar
            description: "Rider's Year of Birth (old format)"
          - name: gender
            data_type: varchar
            description: "Rider's Gender (old format)"
          - name: ride_id
            data_type: varchar
            description: "Ride Id (new format)"
          - name: rideable_type
            data_type: varchar
            description: "Type of Bike: classic, docked or electric (new format)"
          - name: started_at
            data_type: varchar
            description: "Trip Start Time and Date (new format)"
            data_tests:
              - dbt_expectations.expect_column_to_exist
          - name: ended_at
            data_type: varchar
            description: "Trip End Time and Date (new format)"
          - name: start_station_name
            data_type: varchar
            description: "Trip Start Station Name (new format)"
            data_tests:
              - dbt_expectations.expect_column_to_exist
          - name: start_station_id
            data_type: varchar
            description: "Trip Start Station Id (new format)"
            data_tests:
              - dbt_expectations.expect_column_to_exist
          - name: end_station_name
            data_type: varchar
            description: "Trip End Station Name (new format)"
          - name: end_station_id
            data_type: varchar
            description: "Trip End Station Id (new format)"
            data_tests:
              - dbt_expectations.expect_column_to_exist
          - name: start_lat
            data_type: varchar
            description: "Trip Start Station Latitude (new format)"
          - name: start_lng
            data_type: varchar
            description: "Trip Start Station Longitude (new format)"
          - name: end_lat
            data_type: varchar
            description: "Trip End Station Latitude (new format)"
          - name: end_lng
            data_type: varchar
            description: "Trip End Station Longitude (new format)"
          - name: member_casual
            data_type: varchar
            description: "Member or Casual Ride"
            data_tests:
              - dbt_expectations.expect_column_to_exist
          - name: filename
            data_type: varchar
            description: "Name of the Raw Data Source File"

      - name: central_park_weather
        description: "Central Park Weather Observation Records"
        columns:
          - name: station
            data_type: varchar
            description: "Station"
            data_tests:
              - not_null
          - name: name
            data_type: varchar
            description: "Station Name"
          - name: date
            data_type: varchar
            description: "Observation Date"
            data_tests:
              - not_null
              - unique
              - dbt_expectations.expect_column_to_exist
          - name: awnd
            data_type: varchar
            description: "Average Daily Wind Speed"
          - name: prcp
            data_type: varchar
            description: "Precipitation (i.e., rain, melted snow)"
          - name: snow
            data_type: varchar
            description: "Snowfall"
          - name: snwd
            data_type: varchar
            description: "Snowdepth"
          - name: tmax
            data_type: varchar
            description: "Highest Daily Temperature"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
          - name: tmin
            data_type: varchar
            description: "Lowest Daily Temperature"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
          - name: filename
            data_type: varchar
            description: "Name of the Raw Data Source File"

      - name: fhv_bases
        description: "For Hire Vehicle Bases"
        columns:
          - name: base_number
            data_type: varchar
            description: "The TLC license number of the dispatching base"
            data_tests:
              - not_null
              - unique
              - dbt_expectations.expect_column_to_exist
          - name: base_name
            data_type: varchar
            description: "The official name of the base entity"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
          - name: dba
            data_type: varchar
            description: "The “doing business as” name of the base"
          - name: dba_category
            data_type: varchar
            description: "The “doing business as” base category"
          - name: filename
            data_type: varchar
            description: "Name of the Raw Data Source File"

      - name: fhv_tripdata
        description: "For Hire Vehicle Trip Records"
        columns:
          - name: dispatching_base_num
            data_type: varchar
            description: "The TLC Base License Number of the base that dispatched the trip"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
              - relationships:
                  to: source('main','fhv_bases')
                  field: base_number
                  config:
                    severity: warn # Some bases doesn't match in raw data, raising a warning to be aware, to be enforced in staging models
          - name: pickup_datetime
            data_type: timestamp
            description: "The date and time of the trip pick-up"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_values_to_be_of_type:
                  column_type: timestamp
              - dbt_expectations.expect_column_to_exist
          - name: dropoff_datetime
            data_type: timestamp
            description: "The date and time of the trip dropoff"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_values_to_be_of_type:
                  column_type: timestamp
              - dbt_expectations.expect_column_to_exist
          - name: pulocationid
            data_type: double
            description: "TLC Taxi Zone in which the trip began"
            data_tests:
              - dbt_expectations.expect_column_to_exist
              - relationships:
                  to: source('main','taxi_zones')
                  field: locationid
                  config:
                    severity: warn # Some locations doesn't match in raw data, raising a warning to be aware
          - name: dolocationid
            data_type: double
            description: "TLC Taxi Zone in which the trip ended"
            data_tests:
              - dbt_expectations.expect_column_to_exist
              - relationships:
                  to: source('main','taxi_zones')
                  field: locationid
                  config:
                    severity: warn # Some locations doesn't match in raw data, raising a warning to be aware
          - name: sr_flag
            data_type: integer
            description: "Indicates if the trip was a part of a shared ride chain offered by a 
                          High Volume FHV company (e.g. Uber Pool, Lyft Line). For shared
                          trips, the value is 1. For non-shared rides, this field is null."
          - name: affiliated_base_number
            data_type: varchar
            description: "The TLC license number of the base that is affiliated with the
                          vehicle that serviced the trip. In many cases this will be the
                          same base number as the dispatching base"
          - name: filename
            data_type: varchar
            description: "Name of the Raw Data Source File"

      - name: fhvhv_tripdata
        description: "For Hire Vehicle High Volume Trip Records"
        columns:
          - name: hvfhs_license_num
            data_type: varchar
            description: "The TLC license number of the HVFHS base or business
                          As of September 2019, the HVFHS licensees are the following:
                          • HV0002: Juno
                          • HV0003: Uber
                          • HV0004: Via
                          • HV0005: Lyft"
            data_tests:
              - not_null
          - name: dispatching_base_num
            data_type: varchar
            description: "The TLC Base License Number of the base that dispatched the trip"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
              - relationships:
                  to: source('main','fhv_bases')
                  field: base_number
                  config:
                    severity: warn # Some bases doesn't match in raw data, raising a warning to be aware, to be enforced in staging models
          - name: originating_base_num
            data_type: varchar
            description: "Base number of the base that received the original trip request"
            data_tests:
              - relationships:
                  to: source('main','fhv_bases')
                  field: base_number
                  config:
                    severity: warn # Some bases doesn't match in raw data, raising a warning to be aware, to be enforced in staging models
          - name: request_datetime
            data_type: timestamp
            description: "The date/time when passenger requested to be picked up"
            data_tests:
              - dbt_expectations.expect_column_values_to_be_of_type:
                  column_type: timestamp
              - dbt_expectations.expect_column_to_exist
          - name: on_scene_datetime
            data_type: timestamp
            description: "The date/time when driver arrived at the pick-up location (Accessible Vehicles-only)"
            data_tests:
              - dbt_expectations.expect_column_values_to_be_of_type:
                  column_type: timestamp
          - name: pickup_datetime
            data_type: timestamp
            description: "The date and time of the trip pick-up"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_values_to_be_of_type:
                  column_type: timestamp
              - dbt_expectations.expect_column_to_exist
          - name: dropoff_datetime
            data_type: timestamp
            description: "The date and time of the trip drop-off"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_values_to_be_of_type:
                  column_type: timestamp
              - dbt_expectations.expect_column_to_exist
          - name: pulocationid
            data_type: bigint
            description: "TLC Taxi Zone in which the trip began"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
              - relationships:
                  to: source('main','taxi_zones')
                  field: locationid
                  config:
                    severity: warn # Some locations doesn't match in raw data, raising a warning to be aware
          - name: dolocationid
            data_type: bigint
            description: "TLC Taxi Zone in which the trip ended"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
              - relationships:
                  to: source('main','taxi_zones')
                  field: locationid
                  config:
                    severity: warn # Some locations doesn't match in raw data, raising a warning to be aware
          - name: trip_miles
            data_type: double
            description: "The total miles for passenger trip"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_values_to_be_between:
                  min_value: 0
                  max_value: 600
              - dbt_expectations.expect_column_to_exist
          - name: trip_time
            data_type: bigint
            description: "The total time in seconds for passenger trip"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_values_to_be_between:
                  min_value: 0
              - dbt_expectations.expect_column_to_exist
          - name: base_passenger_fare
            data_type: double
            description: "The base passenger fare before tolls, tips, taxes, and fees"
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
          - name: tolls
            data_type: double
            description: "The total amount of all tolls paid in trip"
          - name: bcf
            data_type: double
            description: "The total amount collected in trip for Black Car Fund"
          - name: sales_tax
            data_type: double
            description: "The total amount collected in trip for NYS sales tax"
          - name: congestion_surcharge
            data_type: double
            description: "The total amount collected in trip for NYS congestion surcharge"
          - name: airport_fee
            data_type: double
            description: "$2.50 for both drop off and pick up at LaGuardia, Newark, and John F. Kennedy airports"
          - name: tips
            data_type: double
            description: "The total amount of tips received from passenger"
          - name: driver_pay
            data_type: double
            description: "The total driver pay (not including tolls or tips and net of commission, surcharges, or taxes)"
            data_tests:
              - not_null
          - name: shared_request_flag
            data_type: varchar
            description: "Did the passenger agree to a shared/pooled ride, regardless of whether they were matched? (Y/N)"
            data_tests:
              - accepted_values:
                  values: ['Y','N']
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: shared_match_flag
            data_type: varchar
            description: "Did the passenger share the vehicle with another passenger who booked separately at any point during the trip? (Y/N)"
            data_tests:
              - accepted_values:
                  values: ['Y','N']
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: access_a_ride_flag
            data_type: varchar
            description: "Was the trip administered on behalf of the Metropolitan Transportation Authority (MTA)? (Y/N)"
            data_tests:
              - accepted_values:
                  values: ['Y','N']
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: wav_request_flag
            data_type: varchar
            description: "Did the passenger request a wheelchair-accessible vehicle (WAV)? (Y/N)"
            data_tests:
              - accepted_values:
                  values: ['Y','N']
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: wav_match_flag
            data_type: varchar
            description: "Did the trip occur in a wheelchair-accessible vehicle (WAV)? (Y/N)"
            data_tests:
              - accepted_values:
                  values: ['Y','N']
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: filename
            data_type: varchar
            description: "Name of the Raw Data Source File"

      - name: green_tripdata
        description: "Street Hail Livery (SHL) / Green Cab Trip Records"
        columns:
          - name: vendorid
            data_type: bigint
            description: "A code indicating the LPEP provider that provided the record.
                          1= Creative Mobile Technologies, LLC; 2= VeriFone Inc."
            data_tests:
              - accepted_values:
                  values: [1,2]
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: lpep_pickup_datetime
            data_type: timestamp
            description: "The date and time when the meter was engaged."
            data_tests:
              - not_null
              - dbt_expectations.expect_column_values_to_be_of_type:
                  column_type: timestamp
              - dbt_expectations.expect_column_to_exist
          - name: lpep_dropoff_datetime
            data_type: timestamp
            description: "The date and time when the meter was disengaged."
            data_tests:
              - not_null
              - dbt_expectations.expect_column_values_to_be_of_type:
                  column_type: timestamp
              - dbt_expectations.expect_column_to_exist
          - name: store_and_fwd_flag
            data_type: varchar
            description: "This flag indicates whether the trip record was held in vehicle memory before sending to the vendor,
                          aka “store and forward,” because the vehicle did not have a connection to the server.
                          Y= store and forward trip
                          N= not a store and forward trip"
            data_tests:
              - accepted_values:
                  values: ['Y','N']
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: ratecodeid
            data_type: double
            description: "The final rate code in effect at the end of the trip.
                          1=Standard rate
                          2=JFK
                          3=Newark
                          4=Nassau or Westchester
                          5=Negotiated fare
                          6=Group ride"
            data_tests:
              - accepted_values:
                  values: [1,2,3,4,5,6]
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: pulocationid
            data_type: bigint
            description: "TLC Taxi Zone in which the taximeter was engaged"
            data_tests:
              - dbt_expectations.expect_column_to_exist
              - relationships:
                  to: source('main','taxi_zones')
                  field: locationid
                  config:
                    severity: warn # Some locations doesn't match in raw data, raising a warning to be aware
          - name: dolocationid
            data_type: bigint
            description: "TLC Taxi Zone in which the taximeter was disengaged"
            data_tests:
              - dbt_expectations.expect_column_to_exist
              - relationships:
                  to: source('main','taxi_zones')
                  field: locationid
                  config:
                    severity: warn # Some locations doesn't match in raw data, raising a warning to be aware
          - name: passenger_count
            data_type: double
            description: "The number of passengers in the vehicle.
                          This is a driver-entered value."
          - name: trip_distance
            data_type: double
            description: "The elapsed trip distance in miles reported by the taximeter."
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
              - dbt_expectations.expect_column_values_to_be_between:
                  min_value: 0 # Looking for positive trip distances
                  config:
                    severity: warn # For raw data it's possible to have negative values so just raising a warning
          - name: fare_amount
            data_type: double
            description: "The time-and-distance fare calculated by the meter."
          - name: extra
            data_type: double
            description: "Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush
                          hour and overnight charges."
          - name: mta_tax
            data_type: double
            description: "$0.50 MTA tax that is automatically triggered based on the metered rate in use."
          - name: tip_amount
            data_type: double
            description: "Tip amount - This field is automatically populated for credit card tips. Cash tips are not included."
          - name: tolls_amount
            data_type: double
            description: "Total amount of all tolls paid in trip."
          - name: ehail_fee
            data_type: integer
            description: "Electronic hailing fee."
          - name: improvement_surcharge
            data_type: double
            description: "$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge
                          began being levied in 2015."
          - name: total_amount
            data_type: double
            description: "The total amount charged to passengers. Does not include cash tips."
          - name: payment_type
            data_type: double
            description: "A numeric code signifying how the passenger paid for the trip.
                          1= Credit card
                          2= Cash
                          3= No charge
                          4= Dispute
                          5= Unknown
                          6= Voided trip"
            data_tests:
              - accepted_values:
                  values: [1,2,3,4,5,6]
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: trip_type
            data_type: double
            description: "A code indicating whether the trip was a street-hail or a dispatch that is automatically assigned
                          based on the metered rate in use but can be altered by the driver.
                          1= Street-hail
                          2= Dispatch"
          - name: congestion_surcharge
            data_type: double
            description: "Total amount collected in trip for NYS congestion surcharge."
          - name: filename
            data_type: varchar
            description: "Name of the Raw Data Source File"

      - name: taxi_zones
        description: "NYC Taxi Zones"
        columns:
          - name: objectid
            data_type: integer
            description: "Consecutive Id"
            data_tests:
              - not_null
              - unique
          - name: shape_leng
            data_type: double
            description: "Taxi Zone Lenght"
            data_tests:
              - dbt_expectations.expect_column_values_to_be_between:
                  min_value: 0 # Looking for positive lenghts
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: shape_area
            data_type: double
            description: "Taxi Zone Area"
            data_tests:
              - dbt_expectations.expect_column_values_to_be_between:
                  min_value: 0 # Looking for positive areas
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: zone
            data_type: varchar
            description: "Taxi Zone Name"
            data_tests:
              - not_null
          - name: locationid
            data_type: integer
            description: "Taxi Zone Location Id"
            data_tests:
              - not_null
              - unique:
                  config:
                    severity: warn # Some values are not unique in raw data, raising a warning to be aware
              - dbt_expectations.expect_column_values_to_be_of_type:
                  column_type: integer
              - dbt_expectations.expect_column_to_exist
          - name: borough
            data_type: varchar
            description: "Taxi Zone Borough"
          - name: geom
            data_type: geometry
            description: "Taxi Zone Geolocation"
          - name: filename
            data_type: varchar
            description: "Name of the Raw Data Source File"

      - name: yellow_tripdata
        description: "Yellow Taxi Trip Records"
        columns:
          - name: vendorid
            data_type: bigint
            description: "A code indicating the TPEP provider that provided the record.
                          1= Creative Mobile Technologies, LLC; 2= VeriFone Inc."
            data_tests:
              - accepted_values:
                  values: [1,2]
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: tpep_pickup_datetime
            data_type: timestamp
            description: "The date and time when the meter was engaged."
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
          - name: tpep_dropoff_datetime
            data_type: timestamp
            description: "The date and time when the meter was disengaged."
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
          - name: passenger_count
            data_type: double
            description: "The number of passengers in the vehicle.
                          This is a driver-entered value."
          - name: trip_distance
            data_type: double
            description: "The elapsed trip distance in miles reported by the taximeter."
            data_tests:
              - not_null
              - dbt_expectations.expect_column_to_exist
              - dbt_expectations.expect_column_values_to_be_between:
                  min_value: 0 # Looking for positive trip distances
                  config:
                    severity: warn # For raw data it's possible to have negative values so just raising a warning
          - name: ratecodeid
            data_type: double
            description: "The final rate code in effect at the end of the trip.
                          1= Standard rate
                          2=JFK
                          3=Newark
                          4=Nassau or Westchester
                          5=Negotiated fare
                          6=Group ride"
            data_tests:
              - accepted_values:
                  values: [1,2,3,4,5,6]
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: store_and_fwd_flag
            data_type: varchar
            description: "This flag indicates whether the trip record was held in vehicle memory before sending to the vendor,
                          aka “store and forward,” because the vehicle did not have a connection to the server.
                          Y= store and forward trip
                          N= not a store and forward trip"
            data_tests:
              - accepted_values:
                  values: ['Y','N']
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: pulocationid
            data_type: bigint
            description: "TLC Taxi Zone in which the taximeter was engaged"
            data_tests:
              - dbt_expectations.expect_column_to_exist
              - relationships:
                  to: source('main','taxi_zones')
                  field: locationid
                  config:
                    severity: warn # Some locations doesn't match in raw data, raising a warning to be aware
          - name: dolocationid
            data_type: bigint
            description: "TLC Taxi Zone in which the taximeter was disengaged"
            data_tests:
              - dbt_expectations.expect_column_to_exist
              - relationships:
                  to: source('main','taxi_zones')
                  field: locationid
                  config:
                    severity: warn # Some locations doesn't match in raw data, raising a warning to be aware
          - name: payment_type
            data_type: bigint
            description: "A numeric code signifying how the passenger paid for the trip.
                          1= Credit card
                          2= Cash
                          3= No charge
                          4= Dispute
                          5= Unknown
                          6= Voided trip"
            data_tests:
              - accepted_values:
                  values: [1,2,3,4,5,6]
                  config:
                    severity: warn # Some values may not be valid in raw data, raising a warning to be aware
          - name: fare_amount
            data_type: double
            description: "The time-and-distance fare calculated by the meter."
          - name: extra
            data_type: double
            description: "Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush
                          hour and overnight charges."
          - name: mta_tax
            data_type: double
            description: "$0.50 MTA tax that is automatically triggered based on the metered rate in use."
          - name: tip_amount
            data_type: double
            description: "Tip amount - This field is automatically populated for credit card tips. Cash tips are not included."
          - name: tolls_amount
            data_type: double
            description: "Total amount of all tolls paid in trip."
          - name: improvement_surcharge
            data_type: double
            description: "$0.30 improvement surcharge assessed trips at the flag drop. The improvement surcharge
                          began being levied in 2015."
          - name: total_amount
            data_type: double
            description: "The total amount charged to passengers. Does not include cash tips."
          - name: congestion_surcharge
            data_type: double
            description: "Total amount collected in trip for NYS congestion surcharge."
          - name: airport_fee
            data_type: double
            description: "$1.25 for pick up only at LaGuardia and John F. Kennedy Airports"
          - name: filename
            data_type: varchar
            description: "Name of the Raw Data Source File"